import os
import logging
from datetime import datetime
import time
from openai import OpenAI

# Configure OpenAI client
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
model = os.getenv("OPENAI_MODEL", "gpt-4.1-2025-04-14")

if not os.getenv("OPENAI_API_KEY"):
    raise ValueError("OPENAI_API_KEY is not set. Please configure the environment variable.")

# Setup logging
logging.basicConfig(
    filename="gpt_feedback_log.txt",
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)

def log_feedback(content, level="INFO"):
    """
    Logs feedback messages to the log file.
    """
    if level == "INFO":
        logging.info(content)
    elif level == "ERROR":
        logging.error(content)

def send_gpt_response(prompt, retries=3):
    """
    Sends a prompt to the GPT API and returns the response.
    Retries the request in case of transient failures.
    """
    for attempt in range(retries):
        try:
            response = client.chat.completions.create(
                model=model,
                messages=[{"role": "user", "content": prompt}],
                max_tokens=500,
                timeout=10  # Timeout in seconds
            )
            return response.choices[0].message.content
        except Exception as e:
            log_feedback(f"GPT FAILOVER: Attempt {attempt+1} - {str(e)}", level="ERROR")
            time.sleep(2)  # Wait before retrying
    return "⚠️ GPT service is currently unavailable."

def send_daily_summary():
    """
    Sends a daily summary generated by GPT and logs it.
    """
    msg = send_gpt_response("Give me today's crypto market summary and a short trading lesson.")
    log_feedback(f"Daily Summary:\n{msg}")
    return msg